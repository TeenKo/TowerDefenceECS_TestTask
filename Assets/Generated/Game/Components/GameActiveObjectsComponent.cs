//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public _Core_.ObjectPool.Components.ActiveObjectsComponent activeObjects { get { return (_Core_.ObjectPool.Components.ActiveObjectsComponent)GetComponent(GameComponentsLookup.ActiveObjects); } }
    public bool hasActiveObjects { get { return HasComponent(GameComponentsLookup.ActiveObjects); } }

    public void AddActiveObjects(int newValue) {
        var index = GameComponentsLookup.ActiveObjects;
        var component = (_Core_.ObjectPool.Components.ActiveObjectsComponent)CreateComponent(index, typeof(_Core_.ObjectPool.Components.ActiveObjectsComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceActiveObjects(int newValue) {
        var index = GameComponentsLookup.ActiveObjects;
        var component = (_Core_.ObjectPool.Components.ActiveObjectsComponent)CreateComponent(index, typeof(_Core_.ObjectPool.Components.ActiveObjectsComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveActiveObjects() {
        RemoveComponent(GameComponentsLookup.ActiveObjects);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherActiveObjects;

    public static Entitas.IMatcher<GameEntity> ActiveObjects {
        get {
            if (_matcherActiveObjects == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ActiveObjects);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherActiveObjects = matcher;
            }

            return _matcherActiveObjects;
        }
    }
}
